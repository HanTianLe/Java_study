List集合的特点：
            有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进行精准地控制。
            用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。

            ----> 总归一句话：有序（存储和取出元素的顺序一致）、有索引、可重复（元素可重复）。

List集合的【特有】功能：
            A：添加功能
                void add(int index,Object element):在指定位置添加元素。   （索引不能越界）
            B：获取功能
                Object get(int index):获取指定位置的元素。    （索引不能越界）
            C：列表迭代器
                ListIterator listIterator():List集合特有的迭代器。
            D：删除功能
                Object remove(int index):根据索引删除元素，返回被删除的元素。 （索引不能越界）
            E：修改功能
                Object set(int index,Object element):根据索引修改元素，返回被修改的元素。  （索引不能越界）

List集合特有的迭代器：
            ListIterator listIterator()
                该迭代器继承了Iterator迭代器，
                所以可以直接使用 hasNext() 和 next() 方法。
            该迭代器特有功能：
                Object previous() :获取上一个元素  --->返回列表中的前一个元素。
                boolean hasPrevious() :判断是否有元素。 --->如果以逆向遍历列表，列表迭代器有多个元素，则返回true。
                注意：ListIterator可以实现逆向遍历，但必须先正向遍历后，才能逆向遍历。（一般不使用，无意义。）

PS：迭代器遍历元素的时候，通过集合是不能修改元素的。
解决方法：
        1、迭代器迭代元素，迭代器修改元素。
            元素是跟在刚才迭代的元素后面的。
        2、集合遍历元素，集合修改元素。（普通for）
            元素是在最后添加的。


List的三个子类：
            ArrayList：
                    底层数据结构是数组，查询快，增删慢
                    线程不安全，效率高
            Vector：
                    底层数据结构是数组，查询快，增删慢
                    线程安全，效率低
            LinkedList：
                    底层数据结构是链表，查询慢，增删快
                    线程不安全，效率高
